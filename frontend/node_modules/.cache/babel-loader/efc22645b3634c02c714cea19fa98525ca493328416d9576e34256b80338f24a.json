{"ast":null,"code":"import React,{useState,useEffect,useCallback}from\"react\";import{useLocation,useNavigate}from\"react-router-dom\";import{Box,Card,CardContent,CardHeader,Typography,TextField,Button,Checkbox,FormControlLabel,Table,TableBody,TableCell,TableContainer,TableHead,TableRow,Paper,Grid,Accordion,AccordionSummary,AccordionDetails,CircularProgress,ThemeProvider,createTheme,CssBaseline,Alert}from\"@mui/material\";import ExpandMoreIcon from\"@mui/icons-material/ExpandMore\";import ArrowBackIcon from\"@mui/icons-material/ArrowBack\";import{API_BASE_URL}from\"../config\";// Create a light theme\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const theme=createTheme({palette:{mode:\"light\",primary:{main:\"#1976d2\"},secondary:{main:\"#dc004e\"},background:{default:\"#f5f5f5\",paper:\"#ffffff\"}}});// Helper function to get date from X days ago\nconst getDateXDaysAgo=daysAgo=>{const date=new Date();date.setDate(date.getDate()-daysAgo);return date;};// Format date as YYYY-MM-DD for input fields\nconst formatDateForInput=date=>{return date.toISOString().split(\"T\")[0];};const WoltDashboard=()=>{const location=useLocation();const navigate=useNavigate();// Initialize date range to last 14 days\nconst today=new Date();const fourteenDaysAgo=getDateXDaysAgo(14);const[fromDate,setFromDate]=useState(formatDateForInput(fourteenDaysAgo));const[toDate,setToDate]=useState(formatDateForInput(today));const[lastUpdated,setLastUpdated]=useState(null);const[balance,setBalance]=useState(0);const[rows,setRows]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);// Get courierId from URL query parameters\nconst queryParams=new URLSearchParams(location.search);const courierId=queryParams.get(\"courierId\");// Column visibility state with colors based on image\nconst[visibleColumns,setVisibleColumns]=useState({date:true,tar:true,tcr:true,dph:true,onlineHours:true,onTaskHours:true,idleHours:true,numDeliveries:true,tarShownTasks:true,tarStartedTasks:true,taskDistanceCost:true,shiftGuarantee:true,upfrontPricingAdjustment:true,taskPickupDistanceCost:true,taskBaseCost:true,tip:true,taskCapabilityCost:true,manual:true,cashReceived:true});// Column definitions with metadata and color coding\nconst columns=[{id:\"date\",label:\"Date\",visible:visibleColumns.date,aggregate:null,color:\"White\"},{id:\"tar\",label:\"TAR\",visible:visibleColumns.tar,aggregate:\"avg\",color:\"purple\"},{id:\"tcr\",label:\"TCR\",visible:visibleColumns.tcr,aggregate:\"avg\",color:\"purple\"},{id:\"dph\",label:\"DPH\",visible:visibleColumns.dph,aggregate:\"avg\",color:\"purple\"},{id:\"onlineHours\",label:\"Total Online Time\",visible:visibleColumns.onlineHours,aggregate:\"avg\",color:\"purple\"},{id:\"onTaskHours\",label:\"Total On-Task Time\",visible:visibleColumns.onTaskHours,aggregate:\"avg\",color:\"purple\"},{id:\"idleHours\",label:\"Total Idle Time\",visible:visibleColumns.idleHours,aggregate:\"avg\",color:\"purple\"},{id:\"numDeliveries\",label:\"Deliveries\",visible:visibleColumns.numDeliveries,aggregate:\"avg\",color:\"purple\"},{id:\"tarShownTasks\",label:\"Tasks Shown\",visible:visibleColumns.tarShownTasks,aggregate:\"avg\",color:\"purple\"},{id:\"tarStartedTasks\",label:\"Tasks Started\",visible:visibleColumns.tarStartedTasks,aggregate:\"avg\",color:\"purple\"},{id:\"taskDistanceCost\",label:\"Task Distance Cost\",visible:visibleColumns.taskDistanceCost,aggregate:\"sum\",color:\"green\"},{id:\"shiftGuarantee\",label:\"Shift Guarantee\",visible:visibleColumns.shiftGuarantee,aggregate:\"sum\",color:\"green\"},{id:\"upfrontPricingAdjustment\",label:\"Upfront Pricing Adjustment\",visible:visibleColumns.upfrontPricingAdjustment,aggregate:\"sum\",color:\"green\"},{id:\"taskPickupDistanceCost\",label:\"Task Pickup Distance Cost\",visible:visibleColumns.taskPickupDistanceCost,aggregate:\"sum\",color:\"green\"},{id:\"taskBaseCost\",label:\"Task Base Cost\",visible:visibleColumns.taskBaseCost,aggregate:\"sum\",color:\"green\"},{id:\"tip\",label:\"Tip\",visible:visibleColumns.tip,aggregate:\"sum\",color:\"green\"},{id:\"taskCapabilityCost\",label:\"Task Capability Cost\",visible:visibleColumns.taskCapabilityCost,aggregate:\"sum\",color:\"green\"},{id:\"manual\",label:\"Manual\",visible:visibleColumns.manual,aggregate:\"sum\",color:\"green\"},{id:\"cashReceived\",label:\"Cash Received\",visible:visibleColumns.cashReceived,aggregate:\"sum\",color:\"green\"}];// Format date to DD-MM\nconst formatDate=timestamp=>{const d=new Date(timestamp);const month=String(d.getMonth()+1).padStart(2,\"0\");const day=String(d.getDate()).padStart(2,\"0\");return`${day}-${month}`;};// Convert date string to Unix milliseconds\nconst dateToUnixMilliseconds=dateString=>{if(!dateString)return null;const date=new Date(dateString);return date.getTime();};const getMinutesSinceUpdate=()=>{if(!lastUpdated)return null;const now=new Date();const diff=now-new Date(lastUpdated);const hours=Math.floor(diff/(1000*60*60));const minutes=Math.floor(diff%(1000*60*60)/(1000*60));return`${hours}h ${minutes}m`;};const calculateAggregates=data=>{const result={};columns.forEach(col=>{if(col.aggregate===\"sum\"){result[col.id]=data.reduce((sum,row)=>sum+(row[col.id]||0),0);}else if(col.aggregate===\"avg\"){let sum=0,count=0;data.forEach(row=>{if(row[col.id]!==undefined&&row[col.id]!==null){sum+=row[col.id];count+=1;}});result[col.id]=count>0?sum/count:0;}});return result;};const calculateBalance=data=>{let total=0;data.forEach(row=>{columns.forEach(col=>{if(col.color===\"green\"&&col.id!==\"cashReceived\"&&row[col.id]){total+=row[col.id];}});if(row.cashReceived){total-=row.cashReceived;}});return total;};const processFilteredStats=filteredStats=>{// Process the filtered stats response\nif(!Array.isArray(filteredStats)||filteredStats.length===0){return[];}return filteredStats.map(dayData=>{var _stats$tar,_stats$tcr,_stats$dph,_stats$onlineHours,_stats$onTaskHours,_stats$idleHours,_stats$numDeliveries,_stats$tarShownTasks,_stats$tarStartedTask,_stats$cashBalance;// Check if stats array exists and has at least one entry\nif(!dayData.stats||!Array.isArray(dayData.stats)||dayData.stats.length===0){return null;// Skip this day if no stats\n}const stats=dayData.stats[0];// Get the first stats entry for the day\n// Calculate earnings by transaction type\nconst earnings={taskDistanceCost:(stats.earnings||[]).filter(e=>e.transactionType===\"transaction_type_task_distance_cost\").reduce((sum,e)=>sum+e.amount,0)/1000,shiftGuarantee:(stats.earnings||[]).filter(e=>e.transactionType===\"transaction_type_shift_guarantee\").reduce((sum,e)=>sum+e.amount,0)/1000,upfrontPricingAdjustment:(stats.earnings||[]).filter(e=>e.transactionType===\"transaction_type_upfront_pricing_adjustment\").reduce((sum,e)=>sum+e.amount,0)/1000,taskPickupDistanceCost:(stats.earnings||[]).filter(e=>e.transactionType===\"transaction_type_task_pickup_distance_cost\").reduce((sum,e)=>sum+e.amount,0)/1000,taskBaseCost:(stats.earnings||[]).filter(e=>e.transactionType===\"transaction_type_task_base_cost\").reduce((sum,e)=>sum+e.amount,0)/1000,tip:(stats.earnings||[]).filter(e=>e.transactionType===\"transaction_type_tip\").reduce((sum,e)=>sum+e.amount,0)/1000,taskCapabilityCost:(stats.earnings||[]).filter(e=>e.transactionType===\"transaction_type_task_capability_cost\").reduce((sum,e)=>sum+e.amount,0)/1000,manual:(stats.earnings||[]).filter(e=>e.transactionType===\"transaction_type_manual\").reduce((sum,e)=>sum+e.amount,0)/1000};return{date:formatDate(dayData.date),tar:((_stats$tar=stats.tar)===null||_stats$tar===void 0?void 0:_stats$tar.value)||0,tcr:((_stats$tcr=stats.tcr)===null||_stats$tcr===void 0?void 0:_stats$tcr.value)||0,dph:((_stats$dph=stats.dph)===null||_stats$dph===void 0?void 0:_stats$dph.value)||0,onlineHours:((_stats$onlineHours=stats.onlineHours)===null||_stats$onlineHours===void 0?void 0:_stats$onlineHours.value)||0,onTaskHours:((_stats$onTaskHours=stats.onTaskHours)===null||_stats$onTaskHours===void 0?void 0:_stats$onTaskHours.value)||0,idleHours:((_stats$idleHours=stats.idleHours)===null||_stats$idleHours===void 0?void 0:_stats$idleHours.value)||0,numDeliveries:((_stats$numDeliveries=stats.numDeliveries)===null||_stats$numDeliveries===void 0?void 0:_stats$numDeliveries.value)||0,tarShownTasks:((_stats$tarShownTasks=stats.tarShownTasks)===null||_stats$tarShownTasks===void 0?void 0:_stats$tarShownTasks.value)||0,tarStartedTasks:((_stats$tarStartedTask=stats.tarStartedTasks)===null||_stats$tarStartedTask===void 0?void 0:_stats$tarStartedTask.value)||0,...earnings,cashReceived:((_stats$cashBalance=stats.cashBalance)===null||_stats$cashBalance===void 0?void 0:_stats$cashBalance.amount)||0};}).filter(Boolean);// Remove any null entries\n};const fetchCourierData=useCallback(async()=>{if(!courierId){navigate(\"/\");// Redirect to search page if no courier ID\nreturn;}setLoading(true);setError(null);try{// Always use filtered-stats API with date range\nconst fromTimestamp=dateToUnixMilliseconds(fromDate);const toTimestamp=dateToUnixMilliseconds(toDate);if(!fromTimestamp||!toTimestamp){throw new Error(\"Invalid date format\");}const url=`${API_BASE_URL}/courier/filtered-stats?courierId=${courierId}&from=${fromTimestamp}&to=${toTimestamp}`;const response=await fetch(url);const data=await response.json();console.log(\"API Response:\",data);// For filtered-stats endpoint, success is implied by array data\nif(Array.isArray(data)&&data.length>0){// Process filtered stats response - data is the array directly\nconst formattedData=processFilteredStats(data);// Find the latest update time across all days\nconst latestUpdateTime=Math.max(...data.map(day=>{var _day$stats$;return((_day$stats$=day.stats[0])===null||_day$stats$===void 0?void 0:_day$stats$.latestUpdate)||0;}));console.log(\"Formatted data:\",formattedData);setRows(formattedData);setLastUpdated(new Date(latestUpdateTime));setBalance(calculateBalance(formattedData));}else{setError(\"No data found for the selected date range\");setRows([]);setBalance(0);}}catch(error){console.error(\"Error fetching courier data:\",error);setError(\"Error fetching data: \"+error.message);setRows([]);setBalance(0);}finally{setLoading(false);}},[courierId,fromDate,toDate,navigate]);// Load data when courier ID or date filters change\nuseEffect(()=>{fetchCourierData();},[fetchCourierData]);const handleSubmit=e=>{e.preventDefault();fetchCourierData();};const handleBackToSearch=()=>{navigate(\"/\");};const toggleColumn=columnId=>{setVisibleColumns(prev=>({...prev,[columnId]:!prev[columnId]}));};const aggregates=calculateAggregates(rows);const getCellColor=columnId=>{const column=columns.find(col=>col.id===columnId);if(!column||!column.color)return undefined;if(theme.palette.mode===\"light\"){if(column.color===\"purple\"){return\"#e0d7f1\";}else if(column.color===\"White\"){return\"#f5f5f5\";// Light gray for white in light mode\n}else{return\"#d7f1d7\";// Green\n}}else{if(column.color===\"purple\"){return\"#4a148c\";}else if(column.color===\"White\"){return\"#303030\";// Dark gray for white in dark mode\n}else{return\"#1b5e20\";// Dark green\n}}};const getHeaderColor=columnId=>{const column=columns.find(col=>col.id===columnId);if(!column||!column.color)return undefined;if(theme.palette.mode===\"light\"){if(column.color===\"purple\"){return\"#d6c6e9\";}else if(column.color===\"White\"){return\"#e0e0e0\";// Slightly darker gray for headers in light mode\n}else{return\"#c6e9c6\";// Green\n}}else{if(column.color===\"purple\"){return\"#6a1b9a\";}else if(column.color===\"null\"){return\"#424242\";// Slightly lighter gray for headers in dark mode\n}else{return\"#2e7d32\";// Dark green\n}}};// Format number with space as thousand separator\nconst formatNumber=number=>{return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g,\" \");};return/*#__PURE__*/_jsxs(ThemeProvider,{theme:theme,children:[/*#__PURE__*/_jsx(CssBaseline,{}),/*#__PURE__*/_jsx(Box,{sx:{p:2,maxWidth:\"100%\"},children:/*#__PURE__*/_jsxs(Card,{sx:{mb:3},children:[/*#__PURE__*/_jsx(CardHeader,{title:`Courier Dashboard - ID: ${courierId}`,action:/*#__PURE__*/_jsx(Button,{startIcon:/*#__PURE__*/_jsx(ArrowBackIcon,{}),onClick:handleBackToSearch,variant:\"outlined\",size:\"small\",children:\"Back to Search\"})}),/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsxs(Box,{sx:{display:\"flex\",flexDirection:{xs:\"column\",md:\"row\"},justifyContent:\"space-between\",alignItems:{xs:\"flex-start\",md:\"center\"},gap:2,mb:2},children:[/*#__PURE__*/_jsxs(Box,{sx:{display:\"flex\",alignItems:\"center\",gap:1},children:[/*#__PURE__*/_jsx(Typography,{variant:\"body1\",fontWeight:\"bold\",children:\"Balance:\"}),/*#__PURE__*/_jsxs(Typography,{variant:\"h6\",children:[formatNumber(Math.round(balance)),\" HUF\"]})]}),lastUpdated&&/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",color:\"text.secondary\",children:[\"Last updated: \",getMinutesSinceUpdate()]})]}),/*#__PURE__*/_jsx(\"form\",{onSubmit:handleSubmit,children:/*#__PURE__*/_jsxs(Grid,{container:true,spacing:2,sx:{mb:3},children:[/*#__PURE__*/_jsxs(Grid,{item:true,xs:12,md:4,children:[/*#__PURE__*/_jsx(Typography,{variant:\"body2\",sx:{mb:1},children:\"From Date\"}),/*#__PURE__*/_jsx(TextField,{fullWidth:true,size:\"small\",type:\"date\",value:fromDate,onChange:e=>setFromDate(e.target.value)})]}),/*#__PURE__*/_jsxs(Grid,{item:true,xs:12,md:4,children:[/*#__PURE__*/_jsx(Typography,{variant:\"body2\",sx:{mb:1},children:\"To Date\"}),/*#__PURE__*/_jsx(TextField,{fullWidth:true,size:\"small\",type:\"date\",value:toDate,onChange:e=>setToDate(e.target.value)})]}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:4,sx:{display:\"flex\",alignItems:\"flex-end\"},children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",type:\"submit\",fullWidth:true,sx:{height:40},children:\"Apply Date Filters\"})})]})}),error&&/*#__PURE__*/_jsx(Alert,{severity:\"error\",sx:{mb:2},children:error}),/*#__PURE__*/_jsx(Box,{sx:{mb:2},children:/*#__PURE__*/_jsxs(Accordion,{children:[/*#__PURE__*/_jsx(AccordionSummary,{expandIcon:/*#__PURE__*/_jsx(ExpandMoreIcon,{}),children:/*#__PURE__*/_jsx(Typography,{variant:\"body2\",fontWeight:\"medium\",children:\"Column Visibility\"})}),/*#__PURE__*/_jsx(AccordionDetails,{children:/*#__PURE__*/_jsx(Grid,{container:true,spacing:1,children:columns.map(col=>/*#__PURE__*/_jsx(Grid,{item:true,xs:6,md:4,lg:2,children:/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{checked:visibleColumns[col.id],onChange:()=>toggleColumn(col.id),size:\"small\"}),label:/*#__PURE__*/_jsx(Typography,{variant:\"body2\",sx:{color:col.color===\"purple\"?\"purple\":col.color===\"green\"?\"green\":\"inherit\"},children:col.label})})},col.id))})})]})}),/*#__PURE__*/_jsx(TableContainer,{component:Paper,sx:{overflowX:\"auto\"},children:/*#__PURE__*/_jsxs(Table,{size:\"small\",children:[/*#__PURE__*/_jsx(TableHead,{align:\"center\",children:/*#__PURE__*/_jsx(TableRow,{children:columns.filter(col=>col.visible).map(col=>/*#__PURE__*/_jsx(TableCell,{sx:{backgroundColor:getHeaderColor(col.id),fontWeight:\"bold\",align:\"center\"},children:col.label},col.id))})}),/*#__PURE__*/_jsx(TableBody,{children:loading?/*#__PURE__*/_jsx(TableRow,{children:/*#__PURE__*/_jsx(TableCell,{colSpan:columns.filter(col=>col.visible).length,align:\"center\",children:/*#__PURE__*/_jsxs(Box,{sx:{display:\"flex\",justifyContent:\"center\",p:2},children:[/*#__PURE__*/_jsx(CircularProgress,{size:24}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",sx:{ml:1},children:\"Loading data...\"})]})})}):rows.length===0?/*#__PURE__*/_jsx(TableRow,{children:/*#__PURE__*/_jsx(TableCell,{colSpan:columns.filter(col=>col.visible).length,align:\"center\",children:/*#__PURE__*/_jsx(Typography,{variant:\"body2\",children:\"No data available\"})})}):/*#__PURE__*/_jsxs(_Fragment,{children:[rows.map((row,idx)=>/*#__PURE__*/_jsx(TableRow,{hover:true,children:columns.filter(col=>col.visible).map(col=>/*#__PURE__*/_jsx(TableCell,{sx:{backgroundColor:getCellColor(col.id),whiteSpace:\"nowrap\"},children:col.id===\"date\"?row[col.id]:typeof row[col.id]===\"number\"?col.id.includes(\"Hours\")?`${Number(row[col.id]).toFixed(2)}h`:col.color===\"purple\"?col.id===\"numDeliveries\"||col.id===\"tarShownTasks\"||col.id===\"tarStartedTasks\"?Number(row[col.id]):Number(row[col.id]).toFixed(2):formatNumber(Math.round(row[col.id])):row[col.id]||\"0\"},col.id))},idx)),/*#__PURE__*/_jsx(TableRow,{children:columns.filter(col=>col.visible).map(col=>/*#__PURE__*/_jsx(TableCell,{sx:{fontWeight:\"bold\",backgroundColor:getHeaderColor(col.id),whiteSpace:\"nowrap\"},children:col.id===\"date\"?\"Summary\":aggregates[col.id]!==undefined?col.id.includes(\"Hours\")?`${Number(aggregates[col.id]).toFixed(2)}h`:col.aggregate===\"avg\"?Number(aggregates[col.id]).toFixed(2):formatNumber(Math.round(aggregates[col.id])):\"\"},col.id))})]})})]})})]})]})})]});};export default WoltDashboard;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useLocation","useNavigate","Box","Card","CardContent","CardHeader","Typography","TextField","Button","Checkbox","FormControlLabel","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Grid","Accordion","AccordionSummary","AccordionDetails","CircularProgress","ThemeProvider","createTheme","CssBaseline","Alert","ExpandMoreIcon","ArrowBackIcon","API_BASE_URL","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","theme","palette","mode","primary","main","secondary","background","default","paper","getDateXDaysAgo","daysAgo","date","Date","setDate","getDate","formatDateForInput","toISOString","split","WoltDashboard","location","navigate","today","fourteenDaysAgo","fromDate","setFromDate","toDate","setToDate","lastUpdated","setLastUpdated","balance","setBalance","rows","setRows","loading","setLoading","error","setError","queryParams","URLSearchParams","search","courierId","get","visibleColumns","setVisibleColumns","tar","tcr","dph","onlineHours","onTaskHours","idleHours","numDeliveries","tarShownTasks","tarStartedTasks","taskDistanceCost","shiftGuarantee","upfrontPricingAdjustment","taskPickupDistanceCost","taskBaseCost","tip","taskCapabilityCost","manual","cashReceived","columns","id","label","visible","aggregate","color","formatDate","timestamp","d","month","String","getMonth","padStart","day","dateToUnixMilliseconds","dateString","getTime","getMinutesSinceUpdate","now","diff","hours","Math","floor","minutes","calculateAggregates","data","result","forEach","col","reduce","sum","row","count","undefined","calculateBalance","total","processFilteredStats","filteredStats","Array","isArray","length","map","dayData","_stats$tar","_stats$tcr","_stats$dph","_stats$onlineHours","_stats$onTaskHours","_stats$idleHours","_stats$numDeliveries","_stats$tarShownTasks","_stats$tarStartedTask","_stats$cashBalance","stats","earnings","filter","e","transactionType","amount","value","cashBalance","Boolean","fetchCourierData","fromTimestamp","toTimestamp","Error","url","response","fetch","json","console","log","formattedData","latestUpdateTime","max","_day$stats$","latestUpdate","message","handleSubmit","preventDefault","handleBackToSearch","toggleColumn","columnId","prev","aggregates","getCellColor","column","find","getHeaderColor","formatNumber","number","toString","replace","children","sx","p","maxWidth","mb","title","action","startIcon","onClick","variant","size","display","flexDirection","xs","md","justifyContent","alignItems","gap","fontWeight","round","onSubmit","container","spacing","item","fullWidth","type","onChange","target","height","severity","expandIcon","lg","control","checked","component","overflowX","align","backgroundColor","colSpan","ml","idx","hover","whiteSpace","includes","Number","toFixed"],"sources":["/opt/stb/courier/frontend/src/components/WoltDashboard.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Grid,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  CircularProgress,\r\n  ThemeProvider,\r\n  createTheme,\r\n  CssBaseline,\r\n  Alert,\r\n} from \"@mui/material\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport { API_BASE_URL } from \"../config\";\r\n\r\n// Create a light theme\r\nconst theme = createTheme({\r\n  palette: {\r\n    mode: \"light\",\r\n    primary: {\r\n      main: \"#1976d2\",\r\n    },\r\n    secondary: {\r\n      main: \"#dc004e\",\r\n    },\r\n    background: {\r\n      default: \"#f5f5f5\",\r\n      paper: \"#ffffff\",\r\n    },\r\n  },\r\n});\r\n\r\n// Helper function to get date from X days ago\r\nconst getDateXDaysAgo = (daysAgo) => {\r\n  const date = new Date();\r\n  date.setDate(date.getDate() - daysAgo);\r\n  return date;\r\n};\r\n\r\n// Format date as YYYY-MM-DD for input fields\r\nconst formatDateForInput = (date) => {\r\n  return date.toISOString().split(\"T\")[0];\r\n};\r\n\r\nconst WoltDashboard = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  // Initialize date range to last 14 days\r\n  const today = new Date();\r\n  const fourteenDaysAgo = getDateXDaysAgo(14);\r\n\r\n  const [fromDate, setFromDate] = useState(formatDateForInput(fourteenDaysAgo));\r\n  const [toDate, setToDate] = useState(formatDateForInput(today));\r\n  const [lastUpdated, setLastUpdated] = useState(null);\r\n  const [balance, setBalance] = useState(0);\r\n  const [rows, setRows] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Get courierId from URL query parameters\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const courierId = queryParams.get(\"courierId\");\r\n\r\n  // Column visibility state with colors based on image\r\n  const [visibleColumns, setVisibleColumns] = useState({\r\n    date: true,\r\n    tar: true,\r\n    tcr: true,\r\n    dph: true,\r\n    onlineHours: true,\r\n    onTaskHours: true,\r\n    idleHours: true,\r\n    numDeliveries: true,\r\n    tarShownTasks: true,\r\n    tarStartedTasks: true,\r\n    taskDistanceCost: true,\r\n    shiftGuarantee: true,\r\n    upfrontPricingAdjustment: true,\r\n    taskPickupDistanceCost: true,\r\n    taskBaseCost: true,\r\n    tip: true,\r\n    taskCapabilityCost: true,\r\n    manual: true,\r\n    cashReceived: true,\r\n  });\r\n\r\n  // Column definitions with metadata and color coding\r\n  const columns = [\r\n    {\r\n      id: \"date\",\r\n      label: \"Date\",\r\n      visible: visibleColumns.date,\r\n      aggregate: null,\r\n      color: \"White\",\r\n    },\r\n    {\r\n      id: \"tar\",\r\n      label: \"TAR\",\r\n      visible: visibleColumns.tar,\r\n      aggregate: \"avg\",\r\n      color: \"purple\",\r\n    },\r\n    {\r\n      id: \"tcr\",\r\n      label: \"TCR\",\r\n      visible: visibleColumns.tcr,\r\n      aggregate: \"avg\",\r\n      color: \"purple\",\r\n    },\r\n    {\r\n      id: \"dph\",\r\n      label: \"DPH\",\r\n      visible: visibleColumns.dph,\r\n      aggregate: \"avg\",\r\n      color: \"purple\",\r\n    },\r\n    {\r\n      id: \"onlineHours\",\r\n      label: \"Total Online Time\",\r\n      visible: visibleColumns.onlineHours,\r\n      aggregate: \"avg\",\r\n      color: \"purple\",\r\n    },\r\n    {\r\n      id: \"onTaskHours\",\r\n      label: \"Total On-Task Time\",\r\n      visible: visibleColumns.onTaskHours,\r\n      aggregate: \"avg\",\r\n      color: \"purple\",\r\n    },\r\n    {\r\n      id: \"idleHours\",\r\n      label: \"Total Idle Time\",\r\n      visible: visibleColumns.idleHours,\r\n      aggregate: \"avg\",\r\n      color: \"purple\",\r\n    },\r\n    {\r\n      id: \"numDeliveries\",\r\n      label: \"Deliveries\",\r\n      visible: visibleColumns.numDeliveries,\r\n      aggregate: \"avg\",\r\n      color: \"purple\",\r\n    },\r\n    {\r\n      id: \"tarShownTasks\",\r\n      label: \"Tasks Shown\",\r\n      visible: visibleColumns.tarShownTasks,\r\n      aggregate: \"avg\",\r\n      color: \"purple\",\r\n    },\r\n    {\r\n      id: \"tarStartedTasks\",\r\n      label: \"Tasks Started\",\r\n      visible: visibleColumns.tarStartedTasks,\r\n      aggregate: \"avg\",\r\n      color: \"purple\",\r\n    },\r\n    {\r\n      id: \"taskDistanceCost\",\r\n      label: \"Task Distance Cost\",\r\n      visible: visibleColumns.taskDistanceCost,\r\n      aggregate: \"sum\",\r\n      color: \"green\",\r\n    },\r\n    {\r\n      id: \"shiftGuarantee\",\r\n      label: \"Shift Guarantee\",\r\n      visible: visibleColumns.shiftGuarantee,\r\n      aggregate: \"sum\",\r\n      color: \"green\",\r\n    },\r\n    {\r\n      id: \"upfrontPricingAdjustment\",\r\n      label: \"Upfront Pricing Adjustment\",\r\n      visible: visibleColumns.upfrontPricingAdjustment,\r\n      aggregate: \"sum\",\r\n      color: \"green\",\r\n    },\r\n    {\r\n      id: \"taskPickupDistanceCost\",\r\n      label: \"Task Pickup Distance Cost\",\r\n      visible: visibleColumns.taskPickupDistanceCost,\r\n      aggregate: \"sum\",\r\n      color: \"green\",\r\n    },\r\n    {\r\n      id: \"taskBaseCost\",\r\n      label: \"Task Base Cost\",\r\n      visible: visibleColumns.taskBaseCost,\r\n      aggregate: \"sum\",\r\n      color: \"green\",\r\n    },\r\n    {\r\n      id: \"tip\",\r\n      label: \"Tip\",\r\n      visible: visibleColumns.tip,\r\n      aggregate: \"sum\",\r\n      color: \"green\",\r\n    },\r\n    {\r\n      id: \"taskCapabilityCost\",\r\n      label: \"Task Capability Cost\",\r\n      visible: visibleColumns.taskCapabilityCost,\r\n      aggregate: \"sum\",\r\n      color: \"green\",\r\n    },\r\n    {\r\n      id: \"manual\",\r\n      label: \"Manual\",\r\n      visible: visibleColumns.manual,\r\n      aggregate: \"sum\",\r\n      color: \"green\",\r\n    },\r\n    {\r\n      id: \"cashReceived\",\r\n      label: \"Cash Received\",\r\n      visible: visibleColumns.cashReceived,\r\n      aggregate: \"sum\",\r\n      color: \"green\",\r\n    },\r\n  ];\r\n\r\n  // Format date to DD-MM\r\n  const formatDate = (timestamp) => {\r\n    const d = new Date(timestamp);\r\n    const month = String(d.getMonth() + 1).padStart(2, \"0\");\r\n    const day = String(d.getDate()).padStart(2, \"0\");\r\n    return `${day}-${month}`;\r\n  };\r\n\r\n  // Convert date string to Unix milliseconds\r\n  const dateToUnixMilliseconds = (dateString) => {\r\n    if (!dateString) return null;\r\n    const date = new Date(dateString);\r\n    return date.getTime();\r\n  };\r\n\r\n  const getMinutesSinceUpdate = () => {\r\n    if (!lastUpdated) return null;\r\n    const now = new Date();\r\n    const diff = now - new Date(lastUpdated);\r\n    const hours = Math.floor(diff / (1000 * 60 * 60));\r\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n    return `${hours}h ${minutes}m`;\r\n  };\r\n\r\n  const calculateAggregates = (data) => {\r\n    const result = {};\r\n    columns.forEach((col) => {\r\n      if (col.aggregate === \"sum\") {\r\n        result[col.id] = data.reduce((sum, row) => sum + (row[col.id] || 0), 0);\r\n      } else if (col.aggregate === \"avg\") {\r\n        let sum = 0,\r\n          count = 0;\r\n        data.forEach((row) => {\r\n          if (row[col.id] !== undefined && row[col.id] !== null) {\r\n            sum += row[col.id];\r\n            count += 1;\r\n          }\r\n        });\r\n        result[col.id] = count > 0 ? sum / count : 0;\r\n      }\r\n    });\r\n    return result;\r\n  };\r\n\r\n  const calculateBalance = (data) => {\r\n    let total = 0;\r\n    data.forEach((row) => {\r\n      columns.forEach((col) => {\r\n        if (col.color === \"green\" && col.id !== \"cashReceived\" && row[col.id]) {\r\n          total += row[col.id];\r\n        }\r\n      });\r\n      if (row.cashReceived) {\r\n        total -= row.cashReceived;\r\n      }\r\n    });\r\n    return total;\r\n  };\r\n\r\n  const processFilteredStats = (filteredStats) => {\r\n    // Process the filtered stats response\r\n    if (!Array.isArray(filteredStats) || filteredStats.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    return filteredStats\r\n      .map((dayData) => {\r\n        // Check if stats array exists and has at least one entry\r\n        if (\r\n          !dayData.stats ||\r\n          !Array.isArray(dayData.stats) ||\r\n          dayData.stats.length === 0\r\n        ) {\r\n          return null; // Skip this day if no stats\r\n        }\r\n\r\n        const stats = dayData.stats[0]; // Get the first stats entry for the day\r\n\r\n        // Calculate earnings by transaction type\r\n        const earnings = {\r\n          taskDistanceCost:\r\n            (stats.earnings || [])\r\n              .filter(\r\n                (e) =>\r\n                  e.transactionType === \"transaction_type_task_distance_cost\"\r\n              )\r\n              .reduce((sum, e) => sum + e.amount, 0) / 1000,\r\n          shiftGuarantee:\r\n            (stats.earnings || [])\r\n              .filter(\r\n                (e) => e.transactionType === \"transaction_type_shift_guarantee\"\r\n              )\r\n              .reduce((sum, e) => sum + e.amount, 0) / 1000,\r\n          upfrontPricingAdjustment:\r\n            (stats.earnings || [])\r\n              .filter(\r\n                (e) =>\r\n                  e.transactionType ===\r\n                  \"transaction_type_upfront_pricing_adjustment\"\r\n              )\r\n              .reduce((sum, e) => sum + e.amount, 0) / 1000,\r\n          taskPickupDistanceCost:\r\n            (stats.earnings || [])\r\n              .filter(\r\n                (e) =>\r\n                  e.transactionType ===\r\n                  \"transaction_type_task_pickup_distance_cost\"\r\n              )\r\n              .reduce((sum, e) => sum + e.amount, 0) / 1000,\r\n          taskBaseCost:\r\n            (stats.earnings || [])\r\n              .filter(\r\n                (e) => e.transactionType === \"transaction_type_task_base_cost\"\r\n              )\r\n              .reduce((sum, e) => sum + e.amount, 0) / 1000,\r\n          tip:\r\n            (stats.earnings || [])\r\n              .filter((e) => e.transactionType === \"transaction_type_tip\")\r\n              .reduce((sum, e) => sum + e.amount, 0) / 1000,\r\n          taskCapabilityCost:\r\n            (stats.earnings || [])\r\n              .filter(\r\n                (e) =>\r\n                  e.transactionType === \"transaction_type_task_capability_cost\"\r\n              )\r\n              .reduce((sum, e) => sum + e.amount, 0) / 1000,\r\n          manual:\r\n            (stats.earnings || [])\r\n              .filter((e) => e.transactionType === \"transaction_type_manual\")\r\n              .reduce((sum, e) => sum + e.amount, 0) / 1000,\r\n        };\r\n\r\n        return {\r\n          date: formatDate(dayData.date),\r\n          tar: stats.tar?.value || 0,\r\n          tcr: stats.tcr?.value || 0,\r\n          dph: stats.dph?.value || 0,\r\n          onlineHours: stats.onlineHours?.value || 0,\r\n          onTaskHours: stats.onTaskHours?.value || 0,\r\n          idleHours: stats.idleHours?.value || 0,\r\n          numDeliveries: stats.numDeliveries?.value || 0,\r\n          tarShownTasks: stats.tarShownTasks?.value || 0,\r\n          tarStartedTasks: stats.tarStartedTasks?.value || 0,\r\n          ...earnings,\r\n          cashReceived: stats.cashBalance?.amount || 0,\r\n        };\r\n      })\r\n      .filter(Boolean); // Remove any null entries\r\n  };\r\n\r\n  const fetchCourierData = useCallback(async () => {\r\n    if (!courierId) {\r\n      navigate(\"/\"); // Redirect to search page if no courier ID\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Always use filtered-stats API with date range\r\n      const fromTimestamp = dateToUnixMilliseconds(fromDate);\r\n      const toTimestamp = dateToUnixMilliseconds(toDate);\r\n\r\n      if (!fromTimestamp || !toTimestamp) {\r\n        throw new Error(\"Invalid date format\");\r\n      }\r\n\r\n      const url = `${API_BASE_URL}/courier/filtered-stats?courierId=${courierId}&from=${fromTimestamp}&to=${toTimestamp}`;\r\n\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      console.log(\"API Response:\", data);\r\n\r\n      // For filtered-stats endpoint, success is implied by array data\r\n      if (Array.isArray(data) && data.length > 0) {\r\n        // Process filtered stats response - data is the array directly\r\n        const formattedData = processFilteredStats(data);\r\n\r\n        // Find the latest update time across all days\r\n        const latestUpdateTime = Math.max(\r\n          ...data.map((day) => day.stats[0]?.latestUpdate || 0)\r\n        );\r\n\r\n        console.log(\"Formatted data:\", formattedData);\r\n        setRows(formattedData);\r\n        setLastUpdated(new Date(latestUpdateTime));\r\n        setBalance(calculateBalance(formattedData));\r\n      } else {\r\n        setError(\"No data found for the selected date range\");\r\n        setRows([]);\r\n        setBalance(0);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching courier data:\", error);\r\n      setError(\"Error fetching data: \" + error.message);\r\n      setRows([]);\r\n      setBalance(0);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [courierId, fromDate, toDate, navigate]);\r\n\r\n  // Load data when courier ID or date filters change\r\n  useEffect(() => {\r\n    fetchCourierData();\r\n  }, [fetchCourierData]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    fetchCourierData();\r\n  };\r\n\r\n  const handleBackToSearch = () => {\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const toggleColumn = (columnId) => {\r\n    setVisibleColumns((prev) => ({\r\n      ...prev,\r\n      [columnId]: !prev[columnId],\r\n    }));\r\n  };\r\n\r\n  const aggregates = calculateAggregates(rows);\r\n\r\n  const getCellColor = (columnId) => {\r\n    const column = columns.find((col) => col.id === columnId);\r\n    if (!column || !column.color) return undefined;\r\n\r\n    if (theme.palette.mode === \"light\") {\r\n      if (column.color === \"purple\") {\r\n        return \"#e0d7f1\";\r\n      } else if (column.color === \"White\") {\r\n        return \"#f5f5f5\"; // Light gray for white in light mode\r\n      } else {\r\n        return \"#d7f1d7\"; // Green\r\n      }\r\n    } else {\r\n      if (column.color === \"purple\") {\r\n        return \"#4a148c\";\r\n      } else if (column.color === \"White\") {\r\n        return \"#303030\"; // Dark gray for white in dark mode\r\n      } else {\r\n        return \"#1b5e20\"; // Dark green\r\n      }\r\n    }\r\n  };\r\n\r\n  const getHeaderColor = (columnId) => {\r\n    const column = columns.find((col) => col.id === columnId);\r\n    if (!column || !column.color) return undefined;\r\n\r\n    if (theme.palette.mode === \"light\") {\r\n      if (column.color === \"purple\") {\r\n        return \"#d6c6e9\";\r\n      } else if (column.color === \"White\") {\r\n        return \"#e0e0e0\"; // Slightly darker gray for headers in light mode\r\n      } else {\r\n        return \"#c6e9c6\"; // Green\r\n      }\r\n    } else {\r\n      if (column.color === \"purple\") {\r\n        return \"#6a1b9a\";\r\n      } else if (column.color === \"null\") {\r\n        return \"#424242\"; // Slightly lighter gray for headers in dark mode\r\n      } else {\r\n        return \"#2e7d32\"; // Dark green\r\n      }\r\n    }\r\n  };\r\n\r\n  // Format number with space as thousand separator\r\n  const formatNumber = (number) => {\r\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Box sx={{ p: 2, maxWidth: \"100%\" }}>\r\n        <Card sx={{ mb: 3 }}>\r\n          <CardHeader\r\n            title={`Courier Dashboard - ID: ${courierId}`}\r\n            action={\r\n              <Button\r\n                startIcon={<ArrowBackIcon />}\r\n                onClick={handleBackToSearch}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n              >\r\n                Back to Search\r\n              </Button>\r\n            }\r\n          />\r\n          <CardContent>\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                flexDirection: { xs: \"column\", md: \"row\" },\r\n                justifyContent: \"space-between\",\r\n                alignItems: { xs: \"flex-start\", md: \"center\" },\r\n                gap: 2,\r\n                mb: 2,\r\n              }}\r\n            >\r\n              <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}>\r\n                <Typography variant=\"body1\" fontWeight=\"bold\">\r\n                  Balance:\r\n                </Typography>\r\n                <Typography variant=\"h6\">\r\n                  {formatNumber(Math.round(balance))} HUF\r\n                </Typography>\r\n              </Box>\r\n              {lastUpdated && (\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Last updated: {getMinutesSinceUpdate()}\r\n                </Typography>\r\n              )}\r\n            </Box>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n              <Grid container spacing={2} sx={{ mb: 3 }}>\r\n                <Grid item xs={12} md={4}>\r\n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                    From Date\r\n                  </Typography>\r\n                  <TextField\r\n                    fullWidth\r\n                    size=\"small\"\r\n                    type=\"date\"\r\n                    value={fromDate}\r\n                    onChange={(e) => setFromDate(e.target.value)}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={4}>\r\n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                    To Date\r\n                  </Typography>\r\n                  <TextField\r\n                    fullWidth\r\n                    size=\"small\"\r\n                    type=\"date\"\r\n                    value={toDate}\r\n                    onChange={(e) => setToDate(e.target.value)}\r\n                  />\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  md={4}\r\n                  sx={{ display: \"flex\", alignItems: \"flex-end\" }}\r\n                >\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    sx={{ height: 40 }}\r\n                  >\r\n                    Apply Date Filters\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n\r\n            {error && (\r\n              <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                {error}\r\n              </Alert>\r\n            )}\r\n\r\n            <Box sx={{ mb: 2 }}>\r\n              <Accordion>\r\n                <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                  <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                    Column Visibility\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <Grid container spacing={1}>\r\n                    {columns.map((col) => (\r\n                      <Grid item xs={6} md={4} lg={2} key={col.id}>\r\n                        <FormControlLabel\r\n                          control={\r\n                            <Checkbox\r\n                              checked={visibleColumns[col.id]}\r\n                              onChange={() => toggleColumn(col.id)}\r\n                              size=\"small\"\r\n                            />\r\n                          }\r\n                          label={\r\n                            <Typography\r\n                              variant=\"body2\"\r\n                              sx={{\r\n                                color:\r\n                                  col.color === \"purple\"\r\n                                    ? \"purple\"\r\n                                    : col.color === \"green\"\r\n                                    ? \"green\"\r\n                                    : \"inherit\",\r\n                              }}\r\n                            >\r\n                              {col.label}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </Box>\r\n\r\n            <TableContainer component={Paper} sx={{ overflowX: \"auto\" }}>\r\n              <Table size=\"small\">\r\n                <TableHead align=\"center\">\r\n                  <TableRow>\r\n                    {columns\r\n                      .filter((col) => col.visible)\r\n                      .map((col) => (\r\n                        <TableCell\r\n                          key={col.id}\r\n                          sx={{\r\n                            backgroundColor: getHeaderColor(col.id),\r\n                            fontWeight: \"bold\",\r\n                            align: \"center\",\r\n                          }}\r\n                        >\r\n                          {col.label}\r\n                        </TableCell>\r\n                      ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {loading ? (\r\n                    <TableRow>\r\n                      <TableCell\r\n                        colSpan={columns.filter((col) => col.visible).length}\r\n                        align=\"center\"\r\n                      >\r\n                        <Box\r\n                          sx={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            p: 2,\r\n                          }}\r\n                        >\r\n                          <CircularProgress size={24} />\r\n                          <Typography variant=\"body2\" sx={{ ml: 1 }}>\r\n                            Loading data...\r\n                          </Typography>\r\n                        </Box>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ) : rows.length === 0 ? (\r\n                    <TableRow>\r\n                      <TableCell\r\n                        colSpan={columns.filter((col) => col.visible).length}\r\n                        align=\"center\"\r\n                      >\r\n                        <Typography variant=\"body2\">\r\n                          No data available\r\n                        </Typography>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ) : (\r\n                    <>\r\n                      {rows.map((row, idx) => (\r\n                        <TableRow key={idx} hover>\r\n                          {columns\r\n                            .filter((col) => col.visible)\r\n                            .map((col) => (\r\n                              <TableCell\r\n                                key={col.id}\r\n                                sx={{\r\n                                  backgroundColor: getCellColor(col.id),\r\n                                  whiteSpace: \"nowrap\",\r\n                                }}\r\n                              >\r\n                                {col.id === \"date\"\r\n                                  ? row[col.id]\r\n                                  : typeof row[col.id] === \"number\"\r\n                                  ? col.id.includes(\"Hours\")\r\n                                    ? `${Number(row[col.id]).toFixed(2)}h`\r\n                                    : col.color === \"purple\"\r\n                                    ? col.id === \"numDeliveries\" ||\r\n                                      col.id === \"tarShownTasks\" ||\r\n                                      col.id === \"tarStartedTasks\"\r\n                                      ? Number(row[col.id])\r\n                                      : Number(row[col.id]).toFixed(2)\r\n                                    : formatNumber(Math.round(row[col.id]))\r\n                                  : row[col.id] || \"0\"}\r\n                              </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                      ))}\r\n                      <TableRow>\r\n                        {columns\r\n                          .filter((col) => col.visible)\r\n                          .map((col) => (\r\n                            <TableCell\r\n                              key={col.id}\r\n                              sx={{\r\n                                fontWeight: \"bold\",\r\n                                backgroundColor: getHeaderColor(col.id),\r\n                                whiteSpace: \"nowrap\",\r\n                              }}\r\n                            >\r\n                              {col.id === \"date\"\r\n                                ? \"Summary\"\r\n                                : aggregates[col.id] !== undefined\r\n                                ? col.id.includes(\"Hours\")\r\n                                  ? `${Number(aggregates[col.id]).toFixed(2)}h`\r\n                                  : col.aggregate === \"avg\"\r\n                                  ? Number(aggregates[col.id]).toFixed(2)\r\n                                  : formatNumber(Math.round(aggregates[col.id]))\r\n                                : \"\"}\r\n                            </TableCell>\r\n                          ))}\r\n                      </TableRow>\r\n                    </>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </CardContent>\r\n        </Card>\r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default WoltDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}