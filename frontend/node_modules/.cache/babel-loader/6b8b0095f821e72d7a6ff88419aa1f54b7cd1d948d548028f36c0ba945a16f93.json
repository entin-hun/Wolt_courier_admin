{"ast":null,"code":"var _jsxFileName = \"/opt/stb/courier/frontend/src/components/WoltDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { Box, Card, CardContent, CardHeader, Typography, TextField, Button, Checkbox, FormControlLabel, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Grid, Accordion, AccordionSummary, AccordionDetails, CircularProgress, ThemeProvider, createTheme, CssBaseline, Alert } from \"@mui/material\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport { API_BASE_URL } from \"../config\";\n\n// Create a light theme\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst theme = createTheme({\n  palette: {\n    mode: \"light\",\n    primary: {\n      main: \"#1976d2\"\n    },\n    secondary: {\n      main: \"#dc004e\"\n    },\n    background: {\n      default: \"#f5f5f5\",\n      paper: \"#ffffff\"\n    }\n  }\n});\n\n// Helper function to get date from X days ago\nconst getDateXDaysAgo = daysAgo => {\n  const date = new Date();\n  date.setDate(date.getDate() - daysAgo);\n  return date;\n};\n\n// Format date as YYYY-MM-DD for input fields\nconst formatDateForInput = date => {\n  return date.toISOString().split(\"T\")[0];\n};\nconst WoltDashboard = () => {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Initialize date range to last 14 days\n  const today = new Date();\n  const fourteenDaysAgo = getDateXDaysAgo(14);\n  const [fromDate, setFromDate] = useState(formatDateForInput(fourteenDaysAgo));\n  const [toDate, setToDate] = useState(formatDateForInput(today));\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const [balance, setBalance] = useState(0);\n  const [rows, setRows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Get courierId from URL query parameters\n  const queryParams = new URLSearchParams(location.search);\n  const courierId = queryParams.get(\"courierId\");\n\n  // Column visibility state with colors based on image\n  const [visibleColumns, setVisibleColumns] = useState({\n    date: true,\n    tar: true,\n    tcr: true,\n    dph: true,\n    onlineHours: true,\n    onTaskHours: true,\n    idleHours: true,\n    numDeliveries: true,\n    tarShownTasks: true,\n    tarStartedTasks: true,\n    taskDistanceCost: true,\n    shiftGuarantee: true,\n    upfrontPricingAdjustment: true,\n    taskPickupDistanceCost: true,\n    taskBaseCost: true,\n    tip: true,\n    taskCapabilityCost: true,\n    manual: true,\n    cashReceived: true\n  });\n\n  // Column definitions with metadata and color coding\n  const columns = [{\n    id: \"date\",\n    label: \"Date\",\n    visible: visibleColumns.date,\n    aggregate: null,\n    color: \"White\"\n  }, {\n    id: \"tar\",\n    label: \"TAR\",\n    visible: visibleColumns.tar,\n    aggregate: \"avg\",\n    color: \"purple\"\n  }, {\n    id: \"tcr\",\n    label: \"TCR\",\n    visible: visibleColumns.tcr,\n    aggregate: \"avg\",\n    color: \"purple\"\n  }, {\n    id: \"dph\",\n    label: \"DPH\",\n    visible: visibleColumns.dph,\n    aggregate: \"avg\",\n    color: \"purple\"\n  }, {\n    id: \"onlineHours\",\n    label: \"Total Online Time\",\n    visible: visibleColumns.onlineHours,\n    aggregate: \"avg\",\n    color: \"purple\"\n  }, {\n    id: \"onTaskHours\",\n    label: \"Total On-Task Time\",\n    visible: visibleColumns.onTaskHours,\n    aggregate: \"avg\",\n    color: \"purple\"\n  }, {\n    id: \"idleHours\",\n    label: \"Total Idle Time\",\n    visible: visibleColumns.idleHours,\n    aggregate: \"avg\",\n    color: \"purple\"\n  }, {\n    id: \"numDeliveries\",\n    label: \"Deliveries\",\n    visible: visibleColumns.numDeliveries,\n    aggregate: \"avg\",\n    color: \"purple\"\n  }, {\n    id: \"tarShownTasks\",\n    label: \"Tasks Shown\",\n    visible: visibleColumns.tarShownTasks,\n    aggregate: \"avg\",\n    color: \"purple\"\n  }, {\n    id: \"tarStartedTasks\",\n    label: \"Tasks Started\",\n    visible: visibleColumns.tarStartedTasks,\n    aggregate: \"avg\",\n    color: \"purple\"\n  }, {\n    id: \"taskDistanceCost\",\n    label: \"Task Distance Cost\",\n    visible: visibleColumns.taskDistanceCost,\n    aggregate: \"sum\",\n    color: \"green\"\n  }, {\n    id: \"shiftGuarantee\",\n    label: \"Shift Guarantee\",\n    visible: visibleColumns.shiftGuarantee,\n    aggregate: \"sum\",\n    color: \"green\"\n  }, {\n    id: \"upfrontPricingAdjustment\",\n    label: \"Upfront Pricing Adjustment\",\n    visible: visibleColumns.upfrontPricingAdjustment,\n    aggregate: \"sum\",\n    color: \"green\"\n  }, {\n    id: \"taskPickupDistanceCost\",\n    label: \"Task Pickup Distance Cost\",\n    visible: visibleColumns.taskPickupDistanceCost,\n    aggregate: \"sum\",\n    color: \"green\"\n  }, {\n    id: \"taskBaseCost\",\n    label: \"Task Base Cost\",\n    visible: visibleColumns.taskBaseCost,\n    aggregate: \"sum\",\n    color: \"green\"\n  }, {\n    id: \"tip\",\n    label: \"Tip\",\n    visible: visibleColumns.tip,\n    aggregate: \"sum\",\n    color: \"green\"\n  }, {\n    id: \"taskCapabilityCost\",\n    label: \"Task Capability Cost\",\n    visible: visibleColumns.taskCapabilityCost,\n    aggregate: \"sum\",\n    color: \"green\"\n  }, {\n    id: \"manual\",\n    label: \"Manual\",\n    visible: visibleColumns.manual,\n    aggregate: \"sum\",\n    color: \"green\"\n  }, {\n    id: \"cashReceived\",\n    label: \"Cash Received\",\n    visible: visibleColumns.cashReceived,\n    aggregate: \"sum\",\n    color: \"green\"\n  }];\n\n  // Format date to DD-MM\n  const formatDate = timestamp => {\n    const d = new Date(timestamp);\n    const month = String(d.getMonth() + 1).padStart(2, \"0\");\n    const day = String(d.getDate()).padStart(2, \"0\");\n    return `${day}-${month}`;\n  };\n\n  // Convert date string to Unix milliseconds\n  const dateToUnixMilliseconds = dateString => {\n    if (!dateString) return null;\n    const date = new Date(dateString);\n    return date.getTime();\n  };\n  const getMinutesSinceUpdate = () => {\n    if (!lastUpdated) return null;\n    const now = new Date();\n    const diff = now - new Date(lastUpdated);\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n    return `${hours}h ${minutes}m`;\n  };\n  const calculateAggregates = data => {\n    const result = {};\n    columns.forEach(col => {\n      if (col.aggregate === \"sum\") {\n        result[col.id] = data.reduce((sum, row) => sum + (row[col.id] || 0), 0);\n      } else if (col.aggregate === \"avg\") {\n        let sum = 0,\n          count = 0;\n        data.forEach(row => {\n          if (row[col.id] !== undefined && row[col.id] !== null) {\n            sum += row[col.id];\n            count += 1;\n          }\n        });\n        result[col.id] = count > 0 ? sum / count : 0;\n      }\n    });\n    return result;\n  };\n  const calculateBalance = data => {\n    let total = 0;\n    data.forEach(row => {\n      columns.forEach(col => {\n        if (col.color === \"green\" && col.id !== \"cashReceived\" && row[col.id]) {\n          total += row[col.id];\n        }\n      });\n      if (row.cashReceived) {\n        total -= row.cashReceived;\n      }\n    });\n    return total;\n  };\n  const processFilteredStats = filteredStats => {\n    // Process the filtered stats response\n    if (!Array.isArray(filteredStats) || filteredStats.length === 0) {\n      return [];\n    }\n    return filteredStats.map(dayData => {\n      var _stats$tar, _stats$tcr, _stats$dph, _stats$onlineHours, _stats$onTaskHours, _stats$idleHours, _stats$numDeliveries, _stats$tarShownTasks, _stats$tarStartedTask, _stats$cashBalance;\n      // Check if stats array exists and has at least one entry\n      if (!dayData.stats || !Array.isArray(dayData.stats) || dayData.stats.length === 0) {\n        return null; // Skip this day if no stats\n      }\n      const stats = dayData.stats[0]; // Get the first stats entry for the day\n\n      // Calculate earnings by transaction type\n      const earnings = {\n        taskDistanceCost: (stats.earnings || []).filter(e => e.transactionType === \"transaction_type_task_distance_cost\").reduce((sum, e) => sum + e.amount, 0) / 1000,\n        shiftGuarantee: (stats.earnings || []).filter(e => e.transactionType === \"transaction_type_shift_guarantee\").reduce((sum, e) => sum + e.amount, 0) / 1000,\n        upfrontPricingAdjustment: (stats.earnings || []).filter(e => e.transactionType === \"transaction_type_upfront_pricing_adjustment\").reduce((sum, e) => sum + e.amount, 0) / 1000,\n        taskPickupDistanceCost: (stats.earnings || []).filter(e => e.transactionType === \"transaction_type_task_pickup_distance_cost\").reduce((sum, e) => sum + e.amount, 0) / 1000,\n        taskBaseCost: (stats.earnings || []).filter(e => e.transactionType === \"transaction_type_task_base_cost\").reduce((sum, e) => sum + e.amount, 0) / 1000,\n        tip: (stats.earnings || []).filter(e => e.transactionType === \"transaction_type_tip\").reduce((sum, e) => sum + e.amount, 0) / 1000,\n        taskCapabilityCost: (stats.earnings || []).filter(e => e.transactionType === \"transaction_type_task_capability_cost\").reduce((sum, e) => sum + e.amount, 0) / 1000,\n        manual: (stats.earnings || []).filter(e => e.transactionType === \"transaction_type_manual\").reduce((sum, e) => sum + e.amount, 0) / 1000\n      };\n      return {\n        date: formatDate(dayData.date),\n        tar: ((_stats$tar = stats.tar) === null || _stats$tar === void 0 ? void 0 : _stats$tar.value) || 0,\n        tcr: ((_stats$tcr = stats.tcr) === null || _stats$tcr === void 0 ? void 0 : _stats$tcr.value) || 0,\n        dph: ((_stats$dph = stats.dph) === null || _stats$dph === void 0 ? void 0 : _stats$dph.value) || 0,\n        onlineHours: ((_stats$onlineHours = stats.onlineHours) === null || _stats$onlineHours === void 0 ? void 0 : _stats$onlineHours.value) || 0,\n        onTaskHours: ((_stats$onTaskHours = stats.onTaskHours) === null || _stats$onTaskHours === void 0 ? void 0 : _stats$onTaskHours.value) || 0,\n        idleHours: ((_stats$idleHours = stats.idleHours) === null || _stats$idleHours === void 0 ? void 0 : _stats$idleHours.value) || 0,\n        numDeliveries: ((_stats$numDeliveries = stats.numDeliveries) === null || _stats$numDeliveries === void 0 ? void 0 : _stats$numDeliveries.value) || 0,\n        tarShownTasks: ((_stats$tarShownTasks = stats.tarShownTasks) === null || _stats$tarShownTasks === void 0 ? void 0 : _stats$tarShownTasks.value) || 0,\n        tarStartedTasks: ((_stats$tarStartedTask = stats.tarStartedTasks) === null || _stats$tarStartedTask === void 0 ? void 0 : _stats$tarStartedTask.value) || 0,\n        ...earnings,\n        cashReceived: ((_stats$cashBalance = stats.cashBalance) === null || _stats$cashBalance === void 0 ? void 0 : _stats$cashBalance.amount) || 0\n      };\n    }).filter(Boolean); // Remove any null entries\n  };\n  const fetchCourierData = useCallback(async () => {\n    if (!courierId) {\n      navigate(\"/\"); // Redirect to search page if no courier ID\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      // Always use filtered-stats API with date range\n      const fromTimestamp = dateToUnixMilliseconds(fromDate);\n      const toTimestamp = dateToUnixMilliseconds(toDate);\n      if (!fromTimestamp || !toTimestamp) {\n        throw new Error(\"Invalid date format\");\n      }\n      const url = `${API_BASE_URL}/courier/filtered-stats?courierId=${courierId}&from=${fromTimestamp}&to=${toTimestamp}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      console.log(\"API Response:\", data);\n\n      // For filtered-stats endpoint, success is implied by array data\n      if (Array.isArray(data) && data.length > 0) {\n        // Process filtered stats response - data is the array directly\n        const formattedData = processFilteredStats(data);\n\n        // Find the latest update time across all days\n        const latestUpdateTime = Math.max(...data.map(day => {\n          var _day$stats$;\n          return ((_day$stats$ = day.stats[0]) === null || _day$stats$ === void 0 ? void 0 : _day$stats$.latestUpdate) || 0;\n        }));\n        console.log(\"Formatted data:\", formattedData);\n        setRows(formattedData);\n        setLastUpdated(new Date(latestUpdateTime));\n        setBalance(calculateBalance(formattedData));\n      } else {\n        setError(\"No data found for the selected date range\");\n        setRows([]);\n        setBalance(0);\n      }\n    } catch (error) {\n      console.error(\"Error fetching courier data:\", error);\n      setError(\"Error fetching data: \" + error.message);\n      setRows([]);\n      setBalance(0);\n    } finally {\n      setLoading(false);\n    }\n  }, [courierId, fromDate, toDate, navigate]);\n\n  // Load data when courier ID or date filters change\n  useEffect(() => {\n    fetchCourierData();\n  }, [fetchCourierData]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    fetchCourierData();\n  };\n  const handleBackToSearch = () => {\n    navigate(\"/\");\n  };\n  const toggleColumn = columnId => {\n    setVisibleColumns(prev => ({\n      ...prev,\n      [columnId]: !prev[columnId]\n    }));\n  };\n  const aggregates = calculateAggregates(rows);\n  const getCellColor = columnId => {\n    const column = columns.find(col => col.id === columnId);\n    if (!column || !column.color) return undefined;\n    if (theme.palette.mode === \"light\") {\n      if (column.color === \"purple\") {\n        return \"#e0d7f1\";\n      } else if (column.color === \"White\") {\n        return \"#f5f5f5\"; // Light gray for white in light mode\n      } else {\n        return \"#d7f1d7\"; // Green\n      }\n    } else {\n      if (column.color === \"purple\") {\n        return \"#4a148c\";\n      } else if (column.color === \"White\") {\n        return \"#303030\"; // Dark gray for white in dark mode\n      } else {\n        return \"#1b5e20\"; // Dark green\n      }\n    }\n  };\n  const getHeaderColor = columnId => {\n    const column = columns.find(col => col.id === columnId);\n    if (!column || !column.color) return undefined;\n    if (theme.palette.mode === \"light\") {\n      if (column.color === \"purple\") {\n        return \"#d6c6e9\";\n      } else if (column.color === \"White\") {\n        return \"#e0e0e0\"; // Slightly darker gray for headers in light mode\n      } else {\n        return \"#c6e9c6\"; // Green\n      }\n    } else {\n      if (column.color === \"purple\") {\n        return \"#6a1b9a\";\n      } else if (column.color === \"null\") {\n        return \"#424242\"; // Slightly lighter gray for headers in dark mode\n      } else {\n        return \"#2e7d32\"; // Dark green\n      }\n    }\n  };\n\n  // Format number with space as thousand separator\n  const formatNumber = number => {\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2,\n        maxWidth: \"100%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          title: `Courier Dashboard - ID: ${courierId}`,\n          action: /*#__PURE__*/_jsxDEV(Button, {\n            startIcon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 28\n            }, this),\n            onClick: handleBackToSearch,\n            variant: \"outlined\",\n            size: \"small\",\n            children: \"Back to Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: \"flex\",\n              flexDirection: {\n                xs: \"column\",\n                md: \"row\"\n              },\n              justifyContent: \"space-between\",\n              alignItems: {\n                xs: \"flex-start\",\n                md: \"center\"\n              },\n              gap: 2,\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: \"flex\",\n                alignItems: \"center\",\n                gap: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                fontWeight: \"bold\",\n                children: \"Balance:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 550,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: [formatNumber(Math.round(balance)), \" HUF\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 553,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 15\n            }, this), lastUpdated && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: [\"Last updated: \", getMinutesSinceUpdate()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 558,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              sx: {\n                mb: 3\n              },\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                md: 4,\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  sx: {\n                    mb: 1\n                  },\n                  children: \"From Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 567,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  size: \"small\",\n                  type: \"date\",\n                  value: fromDate,\n                  onChange: e => setFromDate(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 570,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 566,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                md: 4,\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  sx: {\n                    mb: 1\n                  },\n                  children: \"To Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 579,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  size: \"small\",\n                  type: \"date\",\n                  value: toDate,\n                  onChange: e => setToDate(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 582,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 578,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                md: 4,\n                sx: {\n                  display: \"flex\",\n                  alignItems: \"flex-end\"\n                },\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  type: \"submit\",\n                  fullWidth: true,\n                  sx: {\n                    height: 40\n                  },\n                  children: \"Apply Date Filters\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 596,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 590,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 13\n          }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            sx: {\n              mb: 2\n            },\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: /*#__PURE__*/_jsxDEV(Accordion, {\n              children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n                expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 616,\n                  columnNumber: 47\n                }, this),\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  fontWeight: \"medium\",\n                  children: \"Column Visibility\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 617,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 616,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n                children: /*#__PURE__*/_jsxDEV(Grid, {\n                  container: true,\n                  spacing: 1,\n                  children: columns.map(col => /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 6,\n                    md: 4,\n                    lg: 2,\n                    children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                      control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                        checked: visibleColumns[col.id],\n                        onChange: () => toggleColumn(col.id),\n                        size: \"small\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 627,\n                        columnNumber: 29\n                      }, this),\n                      label: /*#__PURE__*/_jsxDEV(Typography, {\n                        variant: \"body2\",\n                        sx: {\n                          color: col.color === \"purple\" ? \"purple\" : col.color === \"green\" ? \"green\" : \"inherit\"\n                        },\n                        children: col.label\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 634,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 625,\n                      columnNumber: 25\n                    }, this)\n                  }, col.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 624,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 622,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 621,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 615,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n            component: Paper,\n            sx: {\n              overflowX: \"auto\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              size: \"small\",\n              children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                align: \"center\",\n                children: /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: columns.filter(col => col.visible).map(col => /*#__PURE__*/_jsxDEV(TableCell, {\n                    sx: {\n                      backgroundColor: getHeaderColor(col.id),\n                      fontWeight: \"bold\",\n                      align: \"center\"\n                    },\n                    children: col.label\n                  }, col.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 663,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 659,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 658,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                children: loading ? /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: /*#__PURE__*/_jsxDEV(TableCell, {\n                    colSpan: columns.filter(col => col.visible).length,\n                    align: \"center\",\n                    children: /*#__PURE__*/_jsxDEV(Box, {\n                      sx: {\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        p: 2\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n                        size: 24\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 690,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                        variant: \"body2\",\n                        sx: {\n                          ml: 1\n                        },\n                        children: \"Loading data...\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 691,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 683,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 679,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 678,\n                  columnNumber: 21\n                }, this) : rows.length === 0 ? /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: /*#__PURE__*/_jsxDEV(TableCell, {\n                    colSpan: columns.filter(col => col.visible).length,\n                    align: \"center\",\n                    children: /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body2\",\n                      children: \"No data available\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 703,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 699,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 698,\n                  columnNumber: 21\n                }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [rows.map((row, idx) => /*#__PURE__*/_jsxDEV(TableRow, {\n                    hover: true,\n                    children: columns.filter(col => col.visible).map(col => /*#__PURE__*/_jsxDEV(TableCell, {\n                      sx: {\n                        backgroundColor: getCellColor(col.id),\n                        whiteSpace: \"nowrap\"\n                      },\n                      children: col.id === \"date\" ? row[col.id] : typeof row[col.id] === \"number\" ? col.id.includes(\"Hours\") ? `${Number(row[col.id]).toFixed(2)}h` : col.color === \"purple\" ? col.id === \"numDeliveries\" || col.id === \"tarShownTasks\" || col.id === \"tarStartedTasks\" ? Number(row[col.id]) : Number(row[col.id]).toFixed(2) : formatNumber(Math.round(row[col.id])) : row[col.id] || \"0\"\n                    }, col.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 715,\n                      columnNumber: 31\n                    }, this))\n                  }, idx, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 711,\n                    columnNumber: 25\n                  }, this)), /*#__PURE__*/_jsxDEV(TableRow, {\n                    children: columns.filter(col => col.visible).map(col => /*#__PURE__*/_jsxDEV(TableCell, {\n                      sx: {\n                        fontWeight: \"bold\",\n                        backgroundColor: getHeaderColor(col.id),\n                        whiteSpace: \"nowrap\"\n                      },\n                      children: col.id === \"date\" ? \"Summary\" : aggregates[col.id] !== undefined ? col.id.includes(\"Hours\") ? `${Number(aggregates[col.id]).toFixed(2)}h` : col.aggregate === \"avg\" ? Number(aggregates[col.id]).toFixed(2) : formatNumber(Math.round(aggregates[col.id])) : \"\"\n                    }, col.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 743,\n                      columnNumber: 29\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 739,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 676,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 521,\n    columnNumber: 5\n  }, this);\n};\n_s(WoltDashboard, \"geYyWfoGz2kVLTihbHOMJyPmtPA=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = WoltDashboard;\nexport default WoltDashboard;\nvar _c;\n$RefreshReg$(_c, \"WoltDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useLocation","useNavigate","Box","Card","CardContent","CardHeader","Typography","TextField","Button","Checkbox","FormControlLabel","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Grid","Accordion","AccordionSummary","AccordionDetails","CircularProgress","ThemeProvider","createTheme","CssBaseline","Alert","ExpandMoreIcon","ArrowBackIcon","API_BASE_URL","jsxDEV","_jsxDEV","Fragment","_Fragment","theme","palette","mode","primary","main","secondary","background","default","paper","getDateXDaysAgo","daysAgo","date","Date","setDate","getDate","formatDateForInput","toISOString","split","WoltDashboard","_s","location","navigate","today","fourteenDaysAgo","fromDate","setFromDate","toDate","setToDate","lastUpdated","setLastUpdated","balance","setBalance","rows","setRows","loading","setLoading","error","setError","queryParams","URLSearchParams","search","courierId","get","visibleColumns","setVisibleColumns","tar","tcr","dph","onlineHours","onTaskHours","idleHours","numDeliveries","tarShownTasks","tarStartedTasks","taskDistanceCost","shiftGuarantee","upfrontPricingAdjustment","taskPickupDistanceCost","taskBaseCost","tip","taskCapabilityCost","manual","cashReceived","columns","id","label","visible","aggregate","color","formatDate","timestamp","d","month","String","getMonth","padStart","day","dateToUnixMilliseconds","dateString","getTime","getMinutesSinceUpdate","now","diff","hours","Math","floor","minutes","calculateAggregates","data","result","forEach","col","reduce","sum","row","count","undefined","calculateBalance","total","processFilteredStats","filteredStats","Array","isArray","length","map","dayData","_stats$tar","_stats$tcr","_stats$dph","_stats$onlineHours","_stats$onTaskHours","_stats$idleHours","_stats$numDeliveries","_stats$tarShownTasks","_stats$tarStartedTask","_stats$cashBalance","stats","earnings","filter","e","transactionType","amount","value","cashBalance","Boolean","fetchCourierData","fromTimestamp","toTimestamp","Error","url","response","fetch","json","console","log","formattedData","latestUpdateTime","max","_day$stats$","latestUpdate","message","handleSubmit","preventDefault","handleBackToSearch","toggleColumn","columnId","prev","aggregates","getCellColor","column","find","getHeaderColor","formatNumber","number","toString","replace","children","fileName","_jsxFileName","lineNumber","columnNumber","sx","p","maxWidth","mb","title","action","startIcon","onClick","variant","size","display","flexDirection","xs","md","justifyContent","alignItems","gap","fontWeight","round","onSubmit","container","spacing","item","fullWidth","type","onChange","target","height","severity","expandIcon","lg","control","checked","component","overflowX","align","backgroundColor","colSpan","ml","idx","hover","whiteSpace","includes","Number","toFixed","_c","$RefreshReg$"],"sources":["/opt/stb/courier/frontend/src/components/WoltDashboard.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Grid,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  CircularProgress,\r\n  ThemeProvider,\r\n  createTheme,\r\n  CssBaseline,\r\n  Alert,\r\n} from \"@mui/material\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport { API_BASE_URL } from \"../config\";\r\n\r\n// Create a light theme\r\nconst theme = createTheme({\r\n  palette: {\r\n    mode: \"light\",\r\n    primary: {\r\n      main: \"#1976d2\",\r\n    },\r\n    secondary: {\r\n      main: \"#dc004e\",\r\n    },\r\n    background: {\r\n      default: \"#f5f5f5\",\r\n      paper: \"#ffffff\",\r\n    },\r\n  },\r\n});\r\n\r\n// Helper function to get date from X days ago\r\nconst getDateXDaysAgo = (daysAgo) => {\r\n  const date = new Date();\r\n  date.setDate(date.getDate() - daysAgo);\r\n  return date;\r\n};\r\n\r\n// Format date as YYYY-MM-DD for input fields\r\nconst formatDateForInput = (date) => {\r\n  return date.toISOString().split(\"T\")[0];\r\n};\r\n\r\nconst WoltDashboard = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  // Initialize date range to last 14 days\r\n  const today = new Date();\r\n  const fourteenDaysAgo = getDateXDaysAgo(14);\r\n\r\n  const [fromDate, setFromDate] = useState(formatDateForInput(fourteenDaysAgo));\r\n  const [toDate, setToDate] = useState(formatDateForInput(today));\r\n  const [lastUpdated, setLastUpdated] = useState(null);\r\n  const [balance, setBalance] = useState(0);\r\n  const [rows, setRows] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Get courierId from URL query parameters\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const courierId = queryParams.get(\"courierId\");\r\n\r\n  // Column visibility state with colors based on image\r\n  const [visibleColumns, setVisibleColumns] = useState({\r\n    date: true,\r\n    tar: true,\r\n    tcr: true,\r\n    dph: true,\r\n    onlineHours: true,\r\n    onTaskHours: true,\r\n    idleHours: true,\r\n    numDeliveries: true,\r\n    tarShownTasks: true,\r\n    tarStartedTasks: true,\r\n    taskDistanceCost: true,\r\n    shiftGuarantee: true,\r\n    upfrontPricingAdjustment: true,\r\n    taskPickupDistanceCost: true,\r\n    taskBaseCost: true,\r\n    tip: true,\r\n    taskCapabilityCost: true,\r\n    manual: true,\r\n    cashReceived: true,\r\n  });\r\n\r\n  // Column definitions with metadata and color coding\r\n  const columns = [\r\n    {\r\n      id: \"date\",\r\n      label: \"Date\",\r\n      visible: visibleColumns.date,\r\n      aggregate: null,\r\n      color: \"White\",\r\n    },\r\n    {\r\n      id: \"tar\",\r\n      label: \"TAR\",\r\n      visible: visibleColumns.tar,\r\n      aggregate: \"avg\",\r\n      color: \"purple\",\r\n    },\r\n    {\r\n      id: \"tcr\",\r\n      label: \"TCR\",\r\n      visible: visibleColumns.tcr,\r\n      aggregate: \"avg\",\r\n      color: \"purple\",\r\n    },\r\n    {\r\n      id: \"dph\",\r\n      label: \"DPH\",\r\n      visible: visibleColumns.dph,\r\n      aggregate: \"avg\",\r\n      color: \"purple\",\r\n    },\r\n    {\r\n      id: \"onlineHours\",\r\n      label: \"Total Online Time\",\r\n      visible: visibleColumns.onlineHours,\r\n      aggregate: \"avg\",\r\n      color: \"purple\",\r\n    },\r\n    {\r\n      id: \"onTaskHours\",\r\n      label: \"Total On-Task Time\",\r\n      visible: visibleColumns.onTaskHours,\r\n      aggregate: \"avg\",\r\n      color: \"purple\",\r\n    },\r\n    {\r\n      id: \"idleHours\",\r\n      label: \"Total Idle Time\",\r\n      visible: visibleColumns.idleHours,\r\n      aggregate: \"avg\",\r\n      color: \"purple\",\r\n    },\r\n    {\r\n      id: \"numDeliveries\",\r\n      label: \"Deliveries\",\r\n      visible: visibleColumns.numDeliveries,\r\n      aggregate: \"avg\",\r\n      color: \"purple\",\r\n    },\r\n    {\r\n      id: \"tarShownTasks\",\r\n      label: \"Tasks Shown\",\r\n      visible: visibleColumns.tarShownTasks,\r\n      aggregate: \"avg\",\r\n      color: \"purple\",\r\n    },\r\n    {\r\n      id: \"tarStartedTasks\",\r\n      label: \"Tasks Started\",\r\n      visible: visibleColumns.tarStartedTasks,\r\n      aggregate: \"avg\",\r\n      color: \"purple\",\r\n    },\r\n    {\r\n      id: \"taskDistanceCost\",\r\n      label: \"Task Distance Cost\",\r\n      visible: visibleColumns.taskDistanceCost,\r\n      aggregate: \"sum\",\r\n      color: \"green\",\r\n    },\r\n    {\r\n      id: \"shiftGuarantee\",\r\n      label: \"Shift Guarantee\",\r\n      visible: visibleColumns.shiftGuarantee,\r\n      aggregate: \"sum\",\r\n      color: \"green\",\r\n    },\r\n    {\r\n      id: \"upfrontPricingAdjustment\",\r\n      label: \"Upfront Pricing Adjustment\",\r\n      visible: visibleColumns.upfrontPricingAdjustment,\r\n      aggregate: \"sum\",\r\n      color: \"green\",\r\n    },\r\n    {\r\n      id: \"taskPickupDistanceCost\",\r\n      label: \"Task Pickup Distance Cost\",\r\n      visible: visibleColumns.taskPickupDistanceCost,\r\n      aggregate: \"sum\",\r\n      color: \"green\",\r\n    },\r\n    {\r\n      id: \"taskBaseCost\",\r\n      label: \"Task Base Cost\",\r\n      visible: visibleColumns.taskBaseCost,\r\n      aggregate: \"sum\",\r\n      color: \"green\",\r\n    },\r\n    {\r\n      id: \"tip\",\r\n      label: \"Tip\",\r\n      visible: visibleColumns.tip,\r\n      aggregate: \"sum\",\r\n      color: \"green\",\r\n    },\r\n    {\r\n      id: \"taskCapabilityCost\",\r\n      label: \"Task Capability Cost\",\r\n      visible: visibleColumns.taskCapabilityCost,\r\n      aggregate: \"sum\",\r\n      color: \"green\",\r\n    },\r\n    {\r\n      id: \"manual\",\r\n      label: \"Manual\",\r\n      visible: visibleColumns.manual,\r\n      aggregate: \"sum\",\r\n      color: \"green\",\r\n    },\r\n    {\r\n      id: \"cashReceived\",\r\n      label: \"Cash Received\",\r\n      visible: visibleColumns.cashReceived,\r\n      aggregate: \"sum\",\r\n      color: \"green\",\r\n    },\r\n  ];\r\n\r\n  // Format date to DD-MM\r\n  const formatDate = (timestamp) => {\r\n    const d = new Date(timestamp);\r\n    const month = String(d.getMonth() + 1).padStart(2, \"0\");\r\n    const day = String(d.getDate()).padStart(2, \"0\");\r\n    return `${day}-${month}`;\r\n  };\r\n\r\n  // Convert date string to Unix milliseconds\r\n  const dateToUnixMilliseconds = (dateString) => {\r\n    if (!dateString) return null;\r\n    const date = new Date(dateString);\r\n    return date.getTime();\r\n  };\r\n\r\n  const getMinutesSinceUpdate = () => {\r\n    if (!lastUpdated) return null;\r\n    const now = new Date();\r\n    const diff = now - new Date(lastUpdated);\r\n    const hours = Math.floor(diff / (1000 * 60 * 60));\r\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n    return `${hours}h ${minutes}m`;\r\n  };\r\n\r\n  const calculateAggregates = (data) => {\r\n    const result = {};\r\n    columns.forEach((col) => {\r\n      if (col.aggregate === \"sum\") {\r\n        result[col.id] = data.reduce((sum, row) => sum + (row[col.id] || 0), 0);\r\n      } else if (col.aggregate === \"avg\") {\r\n        let sum = 0,\r\n          count = 0;\r\n        data.forEach((row) => {\r\n          if (row[col.id] !== undefined && row[col.id] !== null) {\r\n            sum += row[col.id];\r\n            count += 1;\r\n          }\r\n        });\r\n        result[col.id] = count > 0 ? sum / count : 0;\r\n      }\r\n    });\r\n    return result;\r\n  };\r\n\r\n  const calculateBalance = (data) => {\r\n    let total = 0;\r\n    data.forEach((row) => {\r\n      columns.forEach((col) => {\r\n        if (col.color === \"green\" && col.id !== \"cashReceived\" && row[col.id]) {\r\n          total += row[col.id];\r\n        }\r\n      });\r\n      if (row.cashReceived) {\r\n        total -= row.cashReceived;\r\n      }\r\n    });\r\n    return total;\r\n  };\r\n\r\n  const processFilteredStats = (filteredStats) => {\r\n    // Process the filtered stats response\r\n    if (!Array.isArray(filteredStats) || filteredStats.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    return filteredStats\r\n      .map((dayData) => {\r\n        // Check if stats array exists and has at least one entry\r\n        if (\r\n          !dayData.stats ||\r\n          !Array.isArray(dayData.stats) ||\r\n          dayData.stats.length === 0\r\n        ) {\r\n          return null; // Skip this day if no stats\r\n        }\r\n\r\n        const stats = dayData.stats[0]; // Get the first stats entry for the day\r\n\r\n        // Calculate earnings by transaction type\r\n        const earnings = {\r\n          taskDistanceCost:\r\n            (stats.earnings || [])\r\n              .filter(\r\n                (e) =>\r\n                  e.transactionType === \"transaction_type_task_distance_cost\"\r\n              )\r\n              .reduce((sum, e) => sum + e.amount, 0) / 1000,\r\n          shiftGuarantee:\r\n            (stats.earnings || [])\r\n              .filter(\r\n                (e) => e.transactionType === \"transaction_type_shift_guarantee\"\r\n              )\r\n              .reduce((sum, e) => sum + e.amount, 0) / 1000,\r\n          upfrontPricingAdjustment:\r\n            (stats.earnings || [])\r\n              .filter(\r\n                (e) =>\r\n                  e.transactionType ===\r\n                  \"transaction_type_upfront_pricing_adjustment\"\r\n              )\r\n              .reduce((sum, e) => sum + e.amount, 0) / 1000,\r\n          taskPickupDistanceCost:\r\n            (stats.earnings || [])\r\n              .filter(\r\n                (e) =>\r\n                  e.transactionType ===\r\n                  \"transaction_type_task_pickup_distance_cost\"\r\n              )\r\n              .reduce((sum, e) => sum + e.amount, 0) / 1000,\r\n          taskBaseCost:\r\n            (stats.earnings || [])\r\n              .filter(\r\n                (e) => e.transactionType === \"transaction_type_task_base_cost\"\r\n              )\r\n              .reduce((sum, e) => sum + e.amount, 0) / 1000,\r\n          tip:\r\n            (stats.earnings || [])\r\n              .filter((e) => e.transactionType === \"transaction_type_tip\")\r\n              .reduce((sum, e) => sum + e.amount, 0) / 1000,\r\n          taskCapabilityCost:\r\n            (stats.earnings || [])\r\n              .filter(\r\n                (e) =>\r\n                  e.transactionType === \"transaction_type_task_capability_cost\"\r\n              )\r\n              .reduce((sum, e) => sum + e.amount, 0) / 1000,\r\n          manual:\r\n            (stats.earnings || [])\r\n              .filter((e) => e.transactionType === \"transaction_type_manual\")\r\n              .reduce((sum, e) => sum + e.amount, 0) / 1000,\r\n        };\r\n\r\n        return {\r\n          date: formatDate(dayData.date),\r\n          tar: stats.tar?.value || 0,\r\n          tcr: stats.tcr?.value || 0,\r\n          dph: stats.dph?.value || 0,\r\n          onlineHours: stats.onlineHours?.value || 0,\r\n          onTaskHours: stats.onTaskHours?.value || 0,\r\n          idleHours: stats.idleHours?.value || 0,\r\n          numDeliveries: stats.numDeliveries?.value || 0,\r\n          tarShownTasks: stats.tarShownTasks?.value || 0,\r\n          tarStartedTasks: stats.tarStartedTasks?.value || 0,\r\n          ...earnings,\r\n          cashReceived: stats.cashBalance?.amount || 0,\r\n        };\r\n      })\r\n      .filter(Boolean); // Remove any null entries\r\n  };\r\n\r\n  const fetchCourierData = useCallback(async () => {\r\n    if (!courierId) {\r\n      navigate(\"/\"); // Redirect to search page if no courier ID\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Always use filtered-stats API with date range\r\n      const fromTimestamp = dateToUnixMilliseconds(fromDate);\r\n      const toTimestamp = dateToUnixMilliseconds(toDate);\r\n\r\n      if (!fromTimestamp || !toTimestamp) {\r\n        throw new Error(\"Invalid date format\");\r\n      }\r\n\r\n      const url = `${API_BASE_URL}/courier/filtered-stats?courierId=${courierId}&from=${fromTimestamp}&to=${toTimestamp}`;\r\n\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      console.log(\"API Response:\", data);\r\n\r\n      // For filtered-stats endpoint, success is implied by array data\r\n      if (Array.isArray(data) && data.length > 0) {\r\n        // Process filtered stats response - data is the array directly\r\n        const formattedData = processFilteredStats(data);\r\n\r\n        // Find the latest update time across all days\r\n        const latestUpdateTime = Math.max(\r\n          ...data.map((day) => day.stats[0]?.latestUpdate || 0)\r\n        );\r\n\r\n        console.log(\"Formatted data:\", formattedData);\r\n        setRows(formattedData);\r\n        setLastUpdated(new Date(latestUpdateTime));\r\n        setBalance(calculateBalance(formattedData));\r\n      } else {\r\n        setError(\"No data found for the selected date range\");\r\n        setRows([]);\r\n        setBalance(0);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching courier data:\", error);\r\n      setError(\"Error fetching data: \" + error.message);\r\n      setRows([]);\r\n      setBalance(0);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [courierId, fromDate, toDate, navigate]);\r\n\r\n  // Load data when courier ID or date filters change\r\n  useEffect(() => {\r\n    fetchCourierData();\r\n  }, [fetchCourierData]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    fetchCourierData();\r\n  };\r\n\r\n  const handleBackToSearch = () => {\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const toggleColumn = (columnId) => {\r\n    setVisibleColumns((prev) => ({\r\n      ...prev,\r\n      [columnId]: !prev[columnId],\r\n    }));\r\n  };\r\n\r\n  const aggregates = calculateAggregates(rows);\r\n\r\n  const getCellColor = (columnId) => {\r\n    const column = columns.find((col) => col.id === columnId);\r\n    if (!column || !column.color) return undefined;\r\n\r\n    if (theme.palette.mode === \"light\") {\r\n      if (column.color === \"purple\") {\r\n        return \"#e0d7f1\";\r\n      } else if (column.color === \"White\") {\r\n        return \"#f5f5f5\"; // Light gray for white in light mode\r\n      } else {\r\n        return \"#d7f1d7\"; // Green\r\n      }\r\n    } else {\r\n      if (column.color === \"purple\") {\r\n        return \"#4a148c\";\r\n      } else if (column.color === \"White\") {\r\n        return \"#303030\"; // Dark gray for white in dark mode\r\n      } else {\r\n        return \"#1b5e20\"; // Dark green\r\n      }\r\n    }\r\n  };\r\n\r\n  const getHeaderColor = (columnId) => {\r\n    const column = columns.find((col) => col.id === columnId);\r\n    if (!column || !column.color) return undefined;\r\n\r\n    if (theme.palette.mode === \"light\") {\r\n      if (column.color === \"purple\") {\r\n        return \"#d6c6e9\";\r\n      } else if (column.color === \"White\") {\r\n        return \"#e0e0e0\"; // Slightly darker gray for headers in light mode\r\n      } else {\r\n        return \"#c6e9c6\"; // Green\r\n      }\r\n    } else {\r\n      if (column.color === \"purple\") {\r\n        return \"#6a1b9a\";\r\n      } else if (column.color === \"null\") {\r\n        return \"#424242\"; // Slightly lighter gray for headers in dark mode\r\n      } else {\r\n        return \"#2e7d32\"; // Dark green\r\n      }\r\n    }\r\n  };\r\n\r\n  // Format number with space as thousand separator\r\n  const formatNumber = (number) => {\r\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Box sx={{ p: 2, maxWidth: \"100%\" }}>\r\n        <Card sx={{ mb: 3 }}>\r\n          <CardHeader\r\n            title={`Courier Dashboard - ID: ${courierId}`}\r\n            action={\r\n              <Button\r\n                startIcon={<ArrowBackIcon />}\r\n                onClick={handleBackToSearch}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n              >\r\n                Back to Search\r\n              </Button>\r\n            }\r\n          />\r\n          <CardContent>\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                flexDirection: { xs: \"column\", md: \"row\" },\r\n                justifyContent: \"space-between\",\r\n                alignItems: { xs: \"flex-start\", md: \"center\" },\r\n                gap: 2,\r\n                mb: 2,\r\n              }}\r\n            >\r\n              <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}>\r\n                <Typography variant=\"body1\" fontWeight=\"bold\">\r\n                  Balance:\r\n                </Typography>\r\n                <Typography variant=\"h6\">\r\n                  {formatNumber(Math.round(balance))} HUF\r\n                </Typography>\r\n              </Box>\r\n              {lastUpdated && (\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Last updated: {getMinutesSinceUpdate()}\r\n                </Typography>\r\n              )}\r\n            </Box>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n              <Grid container spacing={2} sx={{ mb: 3 }}>\r\n                <Grid item xs={12} md={4}>\r\n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                    From Date\r\n                  </Typography>\r\n                  <TextField\r\n                    fullWidth\r\n                    size=\"small\"\r\n                    type=\"date\"\r\n                    value={fromDate}\r\n                    onChange={(e) => setFromDate(e.target.value)}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} md={4}>\r\n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\r\n                    To Date\r\n                  </Typography>\r\n                  <TextField\r\n                    fullWidth\r\n                    size=\"small\"\r\n                    type=\"date\"\r\n                    value={toDate}\r\n                    onChange={(e) => setToDate(e.target.value)}\r\n                  />\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  md={4}\r\n                  sx={{ display: \"flex\", alignItems: \"flex-end\" }}\r\n                >\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    sx={{ height: 40 }}\r\n                  >\r\n                    Apply Date Filters\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n\r\n            {error && (\r\n              <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                {error}\r\n              </Alert>\r\n            )}\r\n\r\n            <Box sx={{ mb: 2 }}>\r\n              <Accordion>\r\n                <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                  <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                    Column Visibility\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <Grid container spacing={1}>\r\n                    {columns.map((col) => (\r\n                      <Grid item xs={6} md={4} lg={2} key={col.id}>\r\n                        <FormControlLabel\r\n                          control={\r\n                            <Checkbox\r\n                              checked={visibleColumns[col.id]}\r\n                              onChange={() => toggleColumn(col.id)}\r\n                              size=\"small\"\r\n                            />\r\n                          }\r\n                          label={\r\n                            <Typography\r\n                              variant=\"body2\"\r\n                              sx={{\r\n                                color:\r\n                                  col.color === \"purple\"\r\n                                    ? \"purple\"\r\n                                    : col.color === \"green\"\r\n                                    ? \"green\"\r\n                                    : \"inherit\",\r\n                              }}\r\n                            >\r\n                              {col.label}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </Box>\r\n\r\n            <TableContainer component={Paper} sx={{ overflowX: \"auto\" }}>\r\n              <Table size=\"small\">\r\n                <TableHead align=\"center\">\r\n                  <TableRow>\r\n                    {columns\r\n                      .filter((col) => col.visible)\r\n                      .map((col) => (\r\n                        <TableCell\r\n                          key={col.id}\r\n                          sx={{\r\n                            backgroundColor: getHeaderColor(col.id),\r\n                            fontWeight: \"bold\",\r\n                            align: \"center\",\r\n                          }}\r\n                        >\r\n                          {col.label}\r\n                        </TableCell>\r\n                      ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {loading ? (\r\n                    <TableRow>\r\n                      <TableCell\r\n                        colSpan={columns.filter((col) => col.visible).length}\r\n                        align=\"center\"\r\n                      >\r\n                        <Box\r\n                          sx={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            p: 2,\r\n                          }}\r\n                        >\r\n                          <CircularProgress size={24} />\r\n                          <Typography variant=\"body2\" sx={{ ml: 1 }}>\r\n                            Loading data...\r\n                          </Typography>\r\n                        </Box>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ) : rows.length === 0 ? (\r\n                    <TableRow>\r\n                      <TableCell\r\n                        colSpan={columns.filter((col) => col.visible).length}\r\n                        align=\"center\"\r\n                      >\r\n                        <Typography variant=\"body2\">\r\n                          No data available\r\n                        </Typography>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ) : (\r\n                    <>\r\n                      {rows.map((row, idx) => (\r\n                        <TableRow key={idx} hover>\r\n                          {columns\r\n                            .filter((col) => col.visible)\r\n                            .map((col) => (\r\n                              <TableCell\r\n                                key={col.id}\r\n                                sx={{\r\n                                  backgroundColor: getCellColor(col.id),\r\n                                  whiteSpace: \"nowrap\",\r\n                                }}\r\n                              >\r\n                                {col.id === \"date\"\r\n                                  ? row[col.id]\r\n                                  : typeof row[col.id] === \"number\"\r\n                                  ? col.id.includes(\"Hours\")\r\n                                    ? `${Number(row[col.id]).toFixed(2)}h`\r\n                                    : col.color === \"purple\"\r\n                                    ? col.id === \"numDeliveries\" ||\r\n                                      col.id === \"tarShownTasks\" ||\r\n                                      col.id === \"tarStartedTasks\"\r\n                                      ? Number(row[col.id])\r\n                                      : Number(row[col.id]).toFixed(2)\r\n                                    : formatNumber(Math.round(row[col.id]))\r\n                                  : row[col.id] || \"0\"}\r\n                              </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                      ))}\r\n                      <TableRow>\r\n                        {columns\r\n                          .filter((col) => col.visible)\r\n                          .map((col) => (\r\n                            <TableCell\r\n                              key={col.id}\r\n                              sx={{\r\n                                fontWeight: \"bold\",\r\n                                backgroundColor: getHeaderColor(col.id),\r\n                                whiteSpace: \"nowrap\",\r\n                              }}\r\n                            >\r\n                              {col.id === \"date\"\r\n                                ? \"Summary\"\r\n                                : aggregates[col.id] !== undefined\r\n                                ? col.id.includes(\"Hours\")\r\n                                  ? `${Number(aggregates[col.id]).toFixed(2)}h`\r\n                                  : col.aggregate === \"avg\"\r\n                                  ? Number(aggregates[col.id]).toFixed(2)\r\n                                  : formatNumber(Math.round(aggregates[col.id]))\r\n                                : \"\"}\r\n                            </TableCell>\r\n                          ))}\r\n                      </TableRow>\r\n                    </>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </CardContent>\r\n        </Card>\r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default WoltDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}